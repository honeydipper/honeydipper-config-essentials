---
workflows:
  notify:
    on_error: exit
    on_failure: exit
    steps:
      - if_match:
          message_type: "error"
        export:
          notify+: $ctx.notify_on_error
      - iterate_parallel: $?ctx.notify
        iterate_as: channel_id
        switch: $ctx.channel_id
        cases:
          "reply":
            function:
              target:
                system: $ctx.chat_system
                function: reply
        default:
          function:
            target:
              system: $ctx.chat_system
              function: say
    no_export:
      - notify


  workflow_announcement:
    workflow: notify
    with:
      message_type: normal
      message: $?ctx.event_announcement
      message-: |-
        An event is triggered with `{{ .ctx._meta_event }}`
        invoking workflow `{{ coalesce .ctx._meta_desc .ctx._meta_name }}`


  workflow_status:
    workflow: notify
    with:
      message_type: $labels.status
      message: $?ctx.status_message
      message-: >-
        `{{ coalesce .ctx._meta_desc .ctx._meta_name "Unnamed workflow" }}` is completed with status `{{ .labels.status }}`
        {{ eq .labels.status "success" | ternary ""
        ( printf "\nwhile performing `%s`\n```%s```" .labels.performing  .labels.reason ) }}


  reload:
    function:
      driver: redispubsub
      rawAction: send
      parameters:
        broadcastSubject: reload

  resume_workflow:
    function:
      driver: redispubsub
      rawAction: send
      parameters:
        broadcastSubject: resume_session
        key: $ctx.resume_token
        labels:
          status: $ctx.labels_status
          reason: $?ctx.labels_reason
        payload: $?ctx.resume_payload
