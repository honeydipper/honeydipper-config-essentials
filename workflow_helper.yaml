---
workflows:
  notify:
    on_error: exit
    on_failure: exit
    steps:
      - if_match:
          message_type: "error"
        export:
          notify+: $?ctx.notify_on_error
      - iterate_parallel: $?ctx.notify
        iterate_as: channel_id
        switch: $ctx.channel_id
        cases:
          "reply":
            call_function: '{{ .ctx.chat_system }}.reply'
        default:
          call_function: '{{ .ctx.chat_system }}.say'
    no_export:
      - notify


  workflow_announcement:
    call_workflow: notify
    with:
      message_type: announcement
      message: $?ctx.event_announcement
      message-: |-
        An event is triggered for `{{ .ctx._meta_event }}` with id <{{ coalesce .ctx._event_url "https://honeydipper.io" }}|#{{ coalesce .ctx._event_id "unspecified" }}>
        {{ coalesce .ctx._event_detail "`no detail for this event is available`" }}
      message+: |


        invoking workflow `{{ coalesce .ctx._meta_desc .ctx._meta_name .ctx.performing }}`


  workflow_status:
    call_workflow: notify
    with:
      message_type: $labels.status
      message: $?ctx.status_message
      message-: >-
        `{{ coalesce .ctx._meta_desc .ctx._meta_name "Unnamed workflow" }}` is completed with status `{{ .labels.status }}`
        {{ eq .labels.status "success" | ternary ""
        ( printf "\nwhile performing `%s`\n```%s```" .labels.performing  .labels.reason ) }}
      message+: $?ctx.status_detail


  reload:
    call_driver: redispubsub.send
    with:
      broadcastSubject: reload

  resume_workflow:
    call_driver: redispubsub.send
    with:
      broadcastSubject: resume_session
      key: $ctx.resume_token
      labels:
        status: $ctx.labels_status
        reason: $?ctx.labels_reason
      payload: $?ctx.resume_payload

  snooze_alert:
    if:
      - $?ctx.alert_Id
    on_error: continue
    steps:
      - call_function: '{{ .ctx.alert_system }}.snooze'
      - call_workflow: notify
        with:
          message_type: $labels.status
          message: |-
            Snoozing `{{ .ctx.alert_system }}` alert  <{{ coalesce .ctx.alert_url "./#" }}|#{{ coalesce .ctx.alert_Id "unspecified" }}> returns `{{ .labels.status }}`{{ if ne .labels.status "success" }}
            ```{{ .labels.reason }}```{{ end }}

  send_heartbeat:
    call_function: '{{ .ctx.alert_system }}.heartbeat'
    description: sending heartbeat to '{{ .ctx.alert_system }}'
