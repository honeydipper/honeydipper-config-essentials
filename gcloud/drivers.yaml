---
drivers:
  daemon:
    features:
      global:
        - name: "driver:gcloud-secret"
          required: true
        - name: "driver:gcloud-kms"
          required: true
      operator:
        - name: "driver:gcloud-gke"
        - name: "driver:gcloud-dataflow"
        - name: "driver:gcloud-spanner"
        - name: "driver:gcloud-logging"
    drivers:
      gcloud-spanner:
        name: gcloud-spanner
        type: builtin
        handlerData:
          shortName: gcloud-spanner

        meta:
          description:
            - >
              This driver enables Honeydipper to perform administrative tasks on spanner databases

          rawActions:
            - name: backup
              description: creating a native backup of the specified database
              parameters:
                - name: service_account
                  description: A gcloud service account key (json) stored as byte array
                - name: project
                  description: The name of the project where the dataflow job to be created
                - name: instance
                  description: The spanner instance of the database
                - name: db
                  description: The name of the database
                - name: expires
                  description: >
                    Optional, defaults to 180 days, the duration after which the backup will expire and be removed. It should be in the format
                    supported by :code:`time.ParseDuration`. See the `document <https://godoc.org/time#ParseDuration>`_
                    for detail.
              returns:
                - name: backupOpID
                  description: A Honeydipper generated identifier for the backup operation used for getting the operation status
              notes:
                - See below for a simple example
                - example: |
                    ---
                    workflows:
                      start_spanner_native_backup:
                        call_driver: gcloud-spanner.backup
                        with:
                          service_account: ...masked...
                          project: foo
                          instance: dbinstance
                          db: bar
                          expires: 2160h
                          # 24h * 90 = 2160h
                        export_on_success:
                          backupOpID: $data.backupOpID

            - name: waitForBackup
              description: wait for backup and return the backup status
              parameters:
                - name: backupOpID
                  description: The Honeydipper generated identifier by `backup` function call
              returns:
                - name: backup
                  description: >
                    The backup object returned by API. See
                    `databasepb.Backup <https://godoc.org/google.golang.org/genproto/googleapis/spanner/admin/database/v1#Backup>`_
                    for detail
              notes:
                - See below for a simple example
                - example: |
                    ---
                    workflows:
                      wait_spanner_native_backup:
                        call_driver: gcloud-spanner.waitForbackup
                        with:
                          backupOpID: $ctx.backupOpID

          notes:
            - You can create systems to ease the use of this driver.
            - for example
            - example: |
                ---
                systems:
                  my_spanner_db:
                    data:
                      serivce_account: ENC[...]
                      project: foo
                      instance: dbinstance
                      db: bar
                    functions:
                      start_backup:
                        driver: gcloud-spanner
                        rawAction: backup
                        parameters:
                          service_account: $sysData.service_account
                          project: $sysData.foo
                          instance: $sysData.dbinstance
                          db: $sysData.db
                          expires: $?ctx.expires
                        export_on_success:
                          backupOpID: $data.backupOpID
                      wait_for_backup:
                        driver: gcloud-spanner
                        rawAction: waitForBackup
                        parameters:
                          backupOpID: $ctx.backupOpID
                        export_on_success:
                          backup: $data.backup
            - Now we can just easily call the system function like below
            - example: |
                ---
                workflows:
                  create_spanner_backup:
                    steps:
                      - call_function: my_spanner_db.start_backup
                      - call_function: my_spanner_db.wait_for_backup

      gcloud-pubsub:
        name: gcloud-pubsub
        type: builtin
        handlerData:
          shortName: gcloud-pubsub

        meta:
          description:
            - >
              This driver enables Honeydipper to receive and consume gcloud pubsub events

          configurations:
            - name: service_account
              description: >
                The gcloud service account key (json) in bytes. This service account needs to have
                proper permissions to subscribe to the topics.

          notes:
            - For example
            - example: |
                ---
                drivers:
                  gcloud-pubsub:
                    service-account: ENC[gcloud-gke,...masked...]

          rawEvents:
            - name: <default>
              description: An pub/sub message is received

              returns:
                - name: project
                  description: The gcloud project to which the pub/sub topic belongs to
                - name: subscriptionName
                  description: The name of the subscription
                - name: text
                  description: The payload of the message, if not json
                - name: json
                  description: The payload parsed into as a json object

              notes:
                - See below for an example usage
                - example: |
                    ---
                    rules:
                      - when:
                          driver: gcloud-pubsub
                          if_match:
                            project: foo
                            subscriptionName: mysub
                            json:
                              datakey: hello
                        do:
                          call_workflow: something

      gcloud-gke:
        name: gcloud-gke
        type: builtin
        handlerData:
          shortName: gcloud-gke

        meta:
          description:
            - >
              This driver enables Honeydipper to interact with GKE clusters.

            - >
              Honeydipper interact with k8s clusters through :code:`kubernetes` driver. However, the :code:`kubernetes` driver
              needs to obtain kubeconfig information such as credentials, certs, API endpoints etc. This is achieved through
              making a RPC call to k8s type drivers. This driver is one of the k8s type driver.

          RPCs:
            - name: getKubeCfg
              description: Fetch kubeconfig information using the vendor specific credentials
              parameters:
                - name: service_account
                  description: Service account key stored as bytes
                - name: project
                  description: The name of the project the cluster belongs to
                - name: location
                  description: The location of the cluster
                - name: regional
                  description: Boolean, true for regional cluster, otherwise zone'al cluster
                - name: cluster
                  description: The name of the cluster
              returns:
                - name: Host
                  description: The endpoint API host
                - name: Token
                  description: The access token used for k8s authentication
                - name: CACert
                  description: The CA cert used for k8s authentication

              notes:
                - See below for an example usage on invoking the RPC from k8s driver
                - |

                  .. code:: go

                     func getGKEConfig(cfg map[string]interface{}) *rest.Config {
                       retbytes, err := driver.RPCCall("driver:gcloud-gke", "getKubeCfg", cfg)
                       if err != nil {
                         log.Panicf("[%s] failed call gcloud to get kubeconfig %+v", driver.Service, err)
                       }

                       ret := dipper.DeserializeContent(retbytes)

                       host, _ := dipper.GetMapDataStr(ret, "Host")
                       token, _ := dipper.GetMapDataStr(ret, "Token")
                       cacert, _ := dipper.GetMapDataStr(ret, "CACert")

                       cadata, _ := base64.StdEncoding.DecodeString(cacert)

                       k8cfg := &rest.Config{
                         Host:        host,
                         BearerToken: token,
                       }
                       k8cfg.CAData = cadata

                       return k8cfg
                     }

                - To configure a kubernetes cluster in Honeydipper configuration yaml :code:`DipperCL`
                - example: |
                    ---
                    systems:
                      my-gke-cluster:
                        extends:
                          - kubernetes
                        data:
                          source:  # all parameters to the RPC here
                            type: gcloud-gke
                            service_account: ...masked...
                            project: foo
                            location: us-central1-a
                            cluster: my-gke-cluster

                - Or, you can share some of the fields by abstracting
                - example: |
                    ---
                    systems:
                      my-gke:
                        data:
                          source:
                            type: gcloud-gke
                            service_account: ...masked...
                            project: foo

                      my-cluster:
                        extends:
                          - kubernetes
                          - my-gke
                        data:
                          source:  # parameters to the RPC here
                            location: us-central1-a
                            cluster: my-gke-cluster

      gcloud-kms:
        name: gcloud-kms
        type: builtin
        handlerData:
          shortName: gcloud-kms

        meta:
          description:
            - >
              This driver enables Honeydipper to interact with gcloud KMS to descrypt configurations.

            - >
              In order to be able to store sensitive configurations encrypted at rest, Honeydipper needs to be able to decrypt
              the content. :code:`DipperCL` uses e-yaml style notion to store the encrypted content, the type of the encryption
              and the payload/parameter is enclosed by the square bracket :code:`[]`. For example.

            - example: |
                mydata: ENC[gcloud-kms,...base64 encoded ciphertext...]

          configurations:
            - name: keyname
              description: The key in KMS key ring used for decryption. e.g. :code:`projects/myproject/locations/us-central1/keyRings/myring/cryptoKeys/mykey`

          RPCs:
            - name: decrypt
              description: Decrypt the given payload
              parameters:
                - name: "*"
                  description: The whole payload is used as a byte array of ciphertext
              returns:
                - name: "*"
                  description: The whole payload is a byte array of plaintext

              notes:
                - See below for an example usage on invoking the RPC from another driver
                - |

                  .. code:: go

                     retbytes, err := driver.RPCCallRaw("driver:gcloud-kms", "decrypt", cipherbytes)

      gcloud-secret:
        name: gcloud-secret
        type: builtin
        handlerData:
          shortName: gcloud-secret

        meta:
          description:
            - >
              This driver enables Honeydipper to fetch items stored in Google Secret Manager.

            - >
              With access to Google Secret Manager, Honeydipper doesn't have to rely on cipher texts stored directly into the
              configurations in the repo. Instead, it can query the Google Secret Manager, and get access to the secrets based
              on the permissions granted to the identity it uses. :code:`DipperCL` uses a keyword interpolation to detect the items
              that need to be looked up using :code:`LOOKUP[<driver>,<key>]`. See blow for example.

            - example: |
                mydata: LOOKUP[gcloud-secret,projects/foo/secrets/bar/versions/latest]

            - >
              As of now, the driver doesn't take any configuration other than the generic `api_timeout`. It uses the default service
              account as its identity.

          RPCs:
            - name: lookup
              description: Lookup a secret in Google Secret Manager
              parameters:
                - name: "*"
                  description: The whole payload is used as a byte array of string for the key
              returns:
                - name: "*"
                  description: The whole payload is a byte array of plaintext

              notes:
                - See below for an example usage on invoking the RPC from another driver
                - |

                  .. code:: go

                     retbytes, err := driver.RPCCallRaw("driver:gcloud-secret", "lookup", []byte("projects/foo/secrets/bar/versions/latest"))

      gcloud-dataflow:
        name: gcloud-dataflow
        type: builtin
        handlerData:
          shortName: gcloud-dataflow

        description: This driver enables Honeydipper to run dataflow jobs
        meta:
          rawActions:
            - name: createJob
              description: creating a dataflow job using a template
              parameters:
                - name: service_account
                  description: A gcloud service account key (json) stored as byte array
                - name: project
                  description: The name of the project where the dataflow job to be created
                - name: location
                  description: The region where the dataflow job to be created
                - name: job
                  description: >
                    The specification of the job see gcloud dataflow API reference
                    `CreateJobFromTemplateRequest <https://godoc.org/google.golang.org/api/dataflow/v1b3#CreateJobFromTemplateRequest>`_
                    for detail
              returns:
                - name: job
                  description: >
                    The job object, see gcloud dataflow API reference
                    `Job <https://godoc.org/google.golang.org/api/dataflow/v1b3#Job>`_
                    for detail
              notes:
                - See below for a simple example
                - example: |
                    ---
                    workflows:
                      start_dataflow_job:
                        call_driver: gcloud-dataflow.createJob
                        with:
                          service_account: ...masked...
                          project: foo
                          location: us-west1
                          job:
                            gcsPath: ...
                            ...

            - name: updateJob
              description: updating a job including draining or cancelling
              parameters:
                - name: service_account
                  description: A gcloud service account key (json) stored as byte array
                - name: project
                  description: The name of the project where the dataflow job to be created
                - name: location
                  description: The region where the dataflow job to be created
                - name: jobSpec
                  description: >
                    The updated specification of the job see gcloud dataflow API reference
                    `Job <https://godoc.org/google.golang.org/api/dataflow/v1b3#Job>`_
                    for detail
                - name: jobID
                  description: The ID of the dataflow job
              returns:
                - name: job
                  description: >
                    The job object, see gcloud dataflow API reference
                    `Job <https://godoc.org/google.golang.org/api/dataflow/v1b3#Job>`_
                    for detail
              notes:
                - See below for a simple example of draining a job
                - example: |
                    ---
                    workflows:
                      find_and_drain_dataflow_job:
                        with:
                          service_account: ...masked...
                          project: foo
                          location: us-west1
                        steps:
                          - call_driver: gcloud-dataflow.findJobByName
                            with:
                              name: bar
                          - call_driver: gcloud-dataflow.updateJob
                            with:
                              jobID: $data.job.Id
                              jobSpec:
                                currentState: JOB_STATE_DRAINING
                          - call_driver: gcloud-dataflow.waitForJob
                            with:
                              jobID: $data.job.Id

            - name: waitForJob
              description: This action will block until the dataflow job is in a terminal state.
              parameters:
                - name: service_account
                  description: A gcloud service account key (json) stored as byte array
                - name: project
                  description: The name of the project where the dataflow job to be created
                - name: location
                  description: The region where the dataflow job to be created
                - name: jobID
                  description: The ID of the dataflow job
                - name: interval
                  description: The interval between polling calls go gcloud API, 15 seconds by default
                - name: timeout
                  description: The total time to wait until the job is in terminal state, 1800 seconds by default
              returns:
                - name: job
                  description: >
                    The job object, see gcloud dataflow API reference
                    `Job <https://godoc.org/google.golang.org/api/dataflow/v1b3#Job>`_
                    for detail
              notes:
                - See below for a simple example
                - example: |
                    ---
                    workflows:
                      run_dataflow_job:
                        with:
                          service_account: ...masked...
                          project: foo
                          location: us-west1
                        steps:
                          - call_driver: gcloud-dataflow.createJob
                            with:
                              job:
                                gcsPath: ...
                                ...
                          - call_driver: gcloud-dataflow.waitForJob
                            with:
                              interval: 60
                              timeout: 600
                              jobID: $data.job.Id

            - name: findJobByName
              description: This action will find an active  job by its name
              parameters:
                - name: service_account
                  description: A gcloud service account key (json) stored as byte array
                - name: project
                  description: The name of the project where the dataflow job to be created
                - name: location
                  description: The region where the dataflow job to be created
                - name: name
                  description: The name of the job to look for
              returns:
                - name: job
                  description: >
                    A partial job object, see gcloud dataflow API reference
                    `Job <https://godoc.org/google.golang.org/api/dataflow/v1b3#Job>`_
                    for detail, only :code:`Id`, :code:`Name` and :code:`CurrentState` fields
                    are populated
              notes:
                - See below for a simple example
                - example: |
                    ---
                    workflows:
                      find_and_wait_dataflow_job:
                        with:
                          service_account: ...masked...
                          project: foo
                          location: us-west1
                        steps:
                          - call_driver: gcloud-dataflow.findJobByName
                            with:
                              name: bar
                          - call_driver: gcloud-dataflow.waitForJob
                            with:
                              jobID: $data.job.Id

            - name: waitForJob
              description: This action will block until the dataflow job is in a terminal state.
              parameters:
                - name: service_account
                  description: A gcloud service account key (json) stored as byte array
                - name: project
                  description: The name of the project where the dataflow job to be created
                - name: location
                  description: The region where the dataflow job to be created
                - name: jobID
                  description: The ID of the dataflow job
                - name: interval
                  description: The interval between polling calls go gcloud API, 15 seconds by default
                - name: timeout
                  description: The total time to wait until the job is in terminal state, 1800 seconds by default
              returns:
                - name: job
                  description: >
                    The job object, see gcloud dataflow API reference
                    `Job <https://godoc.org/google.golang.org/api/dataflow/v1b3#Job>`_
                    for detail
              notes:
                - See below for a simple example
                - example: |
                    ---
                    workflows:
                      wait_for_dataflow_job:
                        with:
                          service_account: ...masked...
                          project: foo
                          location: us-west1
                        steps:
                          - call_driver: gcloud-dataflow.createJob
                            with:
                              job:
                                gcsPath: ...
                                ...
                          - call_driver: gcloud-dataflow.waitForJob
                            with:
                              interval: 60
                              timeout: 600
                              jobID: $data.job.Id

            - name: getJob
              description: This action will get the current status of the dataflow job
              parameters:
                - name: service_account
                  description: A gcloud service account key (json) stored as byte array
                - name: project
                  description: The name of the project where the dataflow job to be created
                - name: location
                  description: The region where the dataflow job to be created
                - name: jobID
                  description: The ID of the dataflow job
              returns:
                - name: job
                  description: >
                    The job object, see gcloud dataflow API reference
                    `Job <https://godoc.org/google.golang.org/api/dataflow/v1b3#Job>`_
                    for detail
              notes:
                - See below for a simple example
                - example: |
                    ---
                    workflows:
                      query_dataflow_job:
                        with:
                          service_account: ...masked...
                          project: foo
                          location: us-west1
                        steps:
                          - call_driver: gcloud-dataflow.createJob
                            with:
                              job:
                                gcsPath: ...
                                ...
                          - call_driver: gcloud-dataflow.getJob
                            with:
                              jobID: $data.job.Id

      gcloud-logging:
        name: gcloud-logging
        type: builtin
        handlerData:
          shortName: gcloud-logging

        meta:
          description:
            - >
              This driver enables Honeydipper to natively send logs to GCP

          configurations:
            - name: loggers
              description: >-
                Mapping loggers to their configurations, if needed; support
                only one field in the configuration as of now,
                :code:`service_account`. Loggers without configurations will
                attempt to use default account.

          notes:
            - For example
            - example: |
                ---
                drivers:
                  gcloud-logging:
                    loggers:
                      my_log:
                        service_account: LOOKUP[gcloud-secret,...secret...]
                      "my_project|my_log":
                        service_account: LOOKUP[gcloud-secret,...secret...]

          rawActions:
            - name: log
              description: send logs to GCP
              parameters:
                - name: severity
                  description: The serverity of the log entry, default to :code:`info`
                - name: logger
                  description: The logger path, in the form of :code:`project|logger_nbame`, or :code:`logger_name` if using GCE metadata for project ID.
                - name: payload
                  description: The payload of the log entry, string, struct or a map
              notes:
                - See below for a simple example
                - example: |
                      ...
                        call_driver: gcloud-logging.log
                        with:
                          severity: info
                          logger: my_log
                          payload:
                            country: US
                            state: CA
                            city: Los Angeles
                            sales: 12000

  gcloud-kms:
    keyname: _place_holder_
