---
workflows:
  start_kube_job:
    on_failure: exit
    steps:
      - description: interpolating predefined variables
        export:
          steps: |
            :yaml:---
            {{- range .ctx.steps }}
            {{- if (typeIs "string" .) }}
            - {{ index $.ctx.predefined_steps . | toJson }}
            {{- else }}
            {{- if not (empty .use) }}
            - {{ index $.ctx.predefined_steps .use | merge (omit . "use") | toJson }}
            {{- else }}
            - {{ toJson . }}
            {{- end }}
            {{- end }}
            {{- end }}
          env: |
            :yaml:---
            {{- range .ctx.env }}
            {{- if (typeIs "string" .) }}
            - {{ index $.ctx.predefined_env . | toJson }}
            {{- else }}
            - {{ toJson . }}
            {{- end }}
            {{- else }}
            []
            {{- end }}
          volumes: |
            :yaml:---
            {{- range .ctx.volumes }}
            {{- if (typeIs "string" .) }}
            - {{ index $.ctx.predefined_volumes . | toJson }}
            {{- else }}
            - {{ toJson . }}
            {{- end }}
            {{- else }}
            []
            {{- end }}
      - description: build job manifest file
        export:
          jobTemplate: "@:resources/honeydipper-job.yaml.tmpl"
      - call_function: '{{ .ctx.system }}.createJob'
        with:
          job: $ctx.jobTemplate

          ### avoid passing the helper variables to the operator
          predefined_steps: "*removed*"
          predefined_env: "*removed*"
          predefined_volumes: "*removed*"

    no_export:
      - steps
      - env
      - volumes
      - jobTemplate

  use_local_kubeconfig:
    export:
      steps+:
        - local_kubeconfig

  run_kubernetes:
    on_failure: exit
    steps:
      - call_workflow: start_kube_job
      - on_failure: continue
        steps:
          - call_function: '{{ .ctx.system }}.waitForJob'
          - call_function: '{{ .ctx.system }}.getJobLog'
