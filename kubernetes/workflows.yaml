---
workflows:
  inject_misc_steps:
    meta:
      notes:
        - >
          This workflow injects some helpful steps into the k8s job before
          making the API to create the job, based on the processed job
          definitions. It is not recommended to use this workflow directly.
          Instead, use :code:`run_kubernetes` to leverage
          all the predefined context variables.

    steps:
      - description: decrypting berglas_files
        with:
          prepend_steps:
            - $ctx.predefined_steps.berglas-files
          prepend_steps+: $ctx.steps
        unless:
          - '{{ index .ctx.prepend_steps 0 "shell" | empty }}'
        export:
          steps*: $ctx.prepend_steps

  start_kube_job:
    meta:
      notes:
        - >
          This workflow creates a k8s job with given job spec. It is not recommended to use this workflow directly.
          Instead, use :code:`run_kubernetes` to leverage all the predefined context variables.

    on_failure: exit
    steps:
      - description: interpolating predefined variables
        export:
          steps: |
            :yaml:---
            {{- range .ctx.steps }}
            {{- if (typeIs "string" .) }}
            - {{ index $.ctx.predefined_steps . | toJson }}
            {{- else }}
            {{- if not (empty .use) }}
            - {{ index $.ctx.predefined_steps .use | merge (omit . "use") | toJson }}
            {{- else }}
            - {{ toJson . }}
            {{- end }}
            {{- end }}
            {{- else }}
            []
            {{- end }}
          env: |
            :yaml:---
            {{- range .ctx.env }}
            {{- if (typeIs "string" .) }}
            - {{ index $.ctx.predefined_env . | toJson }}
            {{- else }}
            - {{ toJson . }}
            {{- end }}
            {{- else }}
            []
            {{- end }}
          volumes: |
            :yaml:---
            {{- range .ctx.volumes }}
            {{- if (typeIs "string" .) }}
            - {{ index $.ctx.predefined_volumes . | toJson }}
            {{- else }}
            - {{ toJson . }}
            {{- end }}
            {{- else }}
            []
            {{- end }}
      - call_workflow: inject_misc_steps
      - description: build job manifest file
        export:
          jobTemplate: "@:resources/honeydipper-job.yaml.tmpl"
      - call_function: '{{ .ctx.system }}.createJob'
        with:
          job: $ctx.jobTemplate

          ### avoid passing the helper variables to the operator
          predefined_steps: "*removed*"
          predefined_env: "*removed*"
          predefined_volumes: "*removed*"

    no_export:
      - steps
      - env
      - volumes
      - jobTemplate

  use_local_kubeconfig:
    meta:
      description:
        - >
          This workflow is a helper to add a step into :code:`steps` context variable to ensure the in-cluster
          kubeconfig is used. Basically, it will delete the kubeconfig files if any presents. It is useful when
          switching from other clusters to local cluster in the same k8s job.
        - example: |
            ---
            workflows:
              copy_deployment_to_local:
                steps:
                  - call_workflow: use_google_credentials
                  - call_workflow: use_gcloud_kubeconfig
                    with:
                      cluster:
                        project: foo
                        cluster: bar
                        zone: us-central1-a
                  - export:
                      steps+:
                        - type: gcloud
                          shell: kubectl get -o yaml deployment {{ .ctx.deployment }} > kuberentes.yaml
                  - call_workflow: use_local_kubeconfig # switching back to local cluster
                  - call_workflow: run_kubernetes
                    with:
                      steps+:
                        - type: gcloud
                          shell: kubectl apply -f kubernetes.yaml
    export:
      steps+:
        - local_kubeconfig

  run_kubernetes:
    description: run kubernetes job
    meta:
      inputs:
        - name: system
          description: The k8s system to use to create and run the job
        - name: steps
          description: >
            The steps that the job is made up with. Each step is an :code:`initContainer` or
            a :code:`container`. The steps are executed one by one as ordered in the list.
            A failure in a step will cause the whole job to fail. Each step is defined with fields
            including :code:`type`, :code:`command`, or :code:`shell`. The :code:`type` tells k8s what image to use,
            the :code:`command` is the command to be executed with language supported by that image. If
            a shell script needs to be executed, use :code:`shell` instead of :code:`command`.

            Also supported are :code:`env` and :code:`volumes` for defining the environment variables and
            volumes specific to this step.
        - name: generateName
          description: The prefix for all jobs created by :code:`Honeydipper`, defaults to :code:`honeydipper-job-`.

        - name: berglas_files
          description: |
            Use :code:`Berglas` to fetch secret files. A list of objects, each
            has a :code:`file` and a :code:`secret` field.  Optionally, you can
            specify the :code:`owner`, :code:`mode` and :code:`dir_mode` for
            the file. This is achieved by adding an :code:`initContainer` to
            run the :code:`berglas access "$secret" > "$file"` commands.

            :code:`Berglas` is a utility for handling secrets. See their
            `github repo <https://github.com/GoogleCloudPlatform/berglas>`_ for
            details.

        - name: env
          description: >
            A list of environment variables for all the steps.
        - name: volumes
          description: >
            A list of volumes to be attached for all the steps. By default, there will be a :code:`EmptyDir` volume
            attached at :code:`/honeydipper`. Each item should have a `name` and `volume` and optionally a `subPath`, and
            they will be used for creating the volume definition and volume mount definition.
        - name: workingDir
          description: >
            The working directory in which the command or script to be exected. By default, :code:`/honeydipper`.
            Note that, the default :code:`workingDir` defined in the image is not used here.

        - name: script_types
          description: >
            A map of predefined script types. The :code:`type` field in :code:`steps` will be used to select
            the image here. :code:`image` field is required. :code:`command_entry` is used for defining the entrypoint
            when using :code:`command` field in step, and :code:`command_prefix` are a list or a string that inserted at the top of
            container args. Correspondingly, the :code:`shell_entry` and :code:`shell_prefix` are used for defining the entrypoint
            and argument prefix for running a `shell` script.

            Also supported is an optional :code:`securtyContext` field for defining the image security context.

        - name: resources
          description: >
            Used for specifying how much of each resource a container needs. See k8s resource management for containers for detail.

        - name: predefined_steps
          description: >
            A map of predefined steps. Use the name of the predefined step in :code:`steps` list to easily define a step without
            specifying the fields. This makes it easier to repeat or share the steps that can be used in multiple places. We can also
            override part of the predefined steps when defining the steps with `use` and overriding fields.

        - name: predefined_env
          description: >
            A map of predefined environment variables.

        - name: predefined_volumes
          description: >
            A map of predefined volumes.

        - name: nodeSelector
          description: See k8s pod specification for detail

        - name: affinity
          description: See k8s pod specification for detail

        - name: tolerations
          description: See k8s pod specification for detail

        - name: timeout
          description: Used for setting the :code:`activeDeadlineSeconds` for the k8s pod

        - name: cleanupAfter
          description: >
            Used for setting the :code:`TTLSecondsAfterFinished` for the k8s job, requires 1.13+
            and the alpha features to be enabled for the cluster. The feature is still in alpha as of k8s 1.18.

        - name: no_cleanup_k8s_job
          description: >
            By default, the job will be deleted upon successful completion. Setting this context variable to a truthy value will
            ensure that the successful job is kept in the cluster.

        - name: k8s_job_backoffLimit
          description: >
            By default, the job will not retry if the pod fails (:code:`backoffLimit` set to 0), you can use this
            to override the setting for the job.

        - name: parallelism
          description: >
            Parallel job execution by setting this to a non-negative integer. If left unset, it will default to 1.

        - name: fromCronJob
          description: >
            Creating the job based on the definition of a cronjob, in the form of :code:`namespace/cronjob`. If the namespace
            is omitted, the current namespace where the job is being created will be used for looking up the cronjob.

        - name: job_creator
          description: >
            The value for the :code:`creator` label, defaults to :code:`honeydipper`. It is useful when you want to target the
            jobs created through this workflow using :code:`kubectl` commands with :code:`-l` option.

        - name: on_job_start
          description: >
            If specified, a workflow specified by :code:`on_job_start` will be executed once the job is created. This is useful for
            sending notifications with job name, links to the log etc.

      exports:
        - name: log
          description: The logs of the job organized in map by container and by pod

        - name: output
          description: The concatinated log outputs as a string

        - name: job_status
          description: A string indicating if the job is :code:`success` or :code:`failure`

      notes:
        - See below for a simple example
        - example: |
            ---
            workflows:
              ci:
                call_workflow: run_kubernetes
                with:
                  system: myrepo.k8s_cluster
                  steps:
                    - git_clone # predefined step
                    - type: node
                      workingDir: /honeydipper/repo
                      shell: npm install && npm build && npm test

        - Another example with overrriden predefined step
        - example: |
            ---
            workflows:
              make_change:
                call_workflow: run_kubernetes
                with:
                  system: myrepo.k8s
                  steps:
                    - git_clone # predefined step
                    - type: bash
                      shell: sed 's/foo/bar/g' repo/package.json
                    - use: git_clone # use predefined step with overriding
                      name: git_commit
                      workingDir: /honeydipper/repo
                      shell: git commit -m 'change' -a && git push

        - An example with :code:`Berglas` decryption for files. Pay attention to how the file ownership is mapped
          to the :code:`runAsUser`.
        - example: |
            ---
            workflows:
              make_change:
                call_workflow: run_kubernetes
                with:
                  system: myrepo.k8s
                  steps:
                    - use: git_clone
                      env:
                        - name: HOME
                          value: /honeydipper/myuser
                      workingDir: /honeydipper/myuser
                      securityContext:
                        runAsUser: 3001
                        runAsGroup: 3001
                        fsGroup: 3001
                    - type: node
                      workingDir: /honeydipper/myuser/repo
                      shell: npm ci
                  berglas_files:
                    - file: /honeydipper/myuser/.ssh/id_rsa
                      secret: sm://my-project/my-ssh-key
                      owner: "3001:3001"
                      mode: "600"
                      dir_mode: "600"

    on_failure: exit
    steps:
      - call_workflow: start_kube_job
      - on_failure: continue
        steps:
          - if:
              - $?ctx.on_job_start
            call_workflow: $ctx.on_job_start
            no_export:
              - '*'
          - call_function: '{{ .ctx.system }}.waitForJob'
            with:
              retry: $ctx.k8s_job_wait_retry,"2"
          - call_function: '{{ .ctx.system }}.getJobLog'
        with:
          hooks:
            on_success: cleanup_kube_job

  cleanup_kube_job:
    description: delete a kubernetes job
    meta:
      inputs:
        - name: system
          description: The k8s system to use to delete the job
        - name: no_cleanup_k8s_job
          description: If set to truthy value, will skip deleting the job
      notes:
        - >
          This workflow is intended to be invoked by :ref:`run_kuberentes` workflow as a hook upon
          successful completion.

    unless:
      - '{{ .ctx.no_cleanup_k8s_job }}'
    call_function: '{{ .ctx.system }}.deleteJob'
    with:
      retry: 2
