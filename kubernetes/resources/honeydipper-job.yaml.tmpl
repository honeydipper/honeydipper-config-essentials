:yaml:---
{{- $finalStepNum := sub (len .ctx.steps) 1 }}
{{- $uniqueID := (empty $.ctx.unique_identifier | ternary (uuidv4) $.ctx.unique_identifier) }}
{{- define "volumeMounts" }}
          {{- range . }}
            - mountPath: {{ .mountPath }}
              name: {{ .volume.name }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
          {{- end }}
{{- end }}
{{- define "expandEnvironments" }}
            {{- if kindIs "map" . }}
            {{- range $k, $v := . }}
            {{- if kindIs "map" $v }}
            - {{ set (deepCopy $v) "name" $k | toJson }}
            {{- else }}
            - {{ dict "name" $k "value" $v | toJson }}
            {{- end }}
            {{- end }}
            {{- else }}
            {{- range . }}
            - {{ toJson . }}
            {{- end }}
            {{- end }}
{{- end }}
{{- define "container" }}
        {{- $step := index . 0 }}
        {{- $index := index . 1 }}
        {{- $script_types := index . 2 }}
        {{- $env := index . 3 }}
        {{- $volumes := index . 4 }}

        {{- with $step }}
        {{- $useShell := not (empty .shell) }}
        {{- $processor := index $script_types (default "bash" .type) }}
        - name: step-{{ default $index .name }}
          image: {{ $processor.image }}
          {{- with $processor.imagePullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          workingDir: '{{ default "/honeydipper" .workingDir }}'
          {{- with .resources }}
          resources:
            {{- range $k, $v := . }}
            {{ $k }}: {{ $v | toJson }}
            {{- end }}
          {{- end }}
          env:
            {{- if (and (empty $env) (empty .env)) }}
            []
            {{- else }}
            {{ template "expandEnvironments" $env }}
            {{ template "expandEnvironments" .env }}
            {{- end }}
          volumeMounts:
            - mountPath: /honeydipper
              name: workdir
            {{ template "volumeMounts" $volumes }}
            {{ template "volumeMounts" .volumes }}
          {{- if $useShell }}
          {{-   if $processor.shell_entry }}
          command: {{ $processor.shell_entry | toJson }}
          {{-   end }}
          {{-   if typeIs "string" .shell }}
          args: {{ append (default (list) $processor.shell_prefix) .shell | toJson }}
          {{-   else }}
          args:
            {{-   range $processor.shell_prefix }}
            - {{    . | toJson }}
            {{-   end }}
            {{-   range .shell }}
            - {{    . | toJson }}
            {{-   end }}
          {{-   end }}
          {{- else }}
          {{-   if $processor.command_entry }}
          command: {{ $processor.command_entry | toJson }}
          {{-   end }}
          {{-   if typeIs "string" .command }}
          args: {{ append (default (list) $processor.command_prefix) .command | toJson }}
          {{-   else }}
          args:
            {{-   range $processor.command_prefix }}
            - {{    . | toJson }}
            {{-   end }}
            {{-   range .command }}
            - {{    . | toJson }}
            {{-   end }}
          {{-   end }}
          {{- end }}
          {{- with $step.securityContext }}
          securityContext: {{ . | toJson }}
          {{- else }}
          {{- with $processor.securityContext }}
          securityContext: {{ . | toJson }}
          {{- end }}
          {{- end }}
          {{- end }}
{{- end }}
apiVersion: batch/v1
kind: Job
metadata:
  generateName: {{ default "honeydipper-job-" $.ctx.generateName }}
  labels:
    creator: {{ default "honeydipper" $.ctx.job_creator }}
    honeydipper-unique-identifier: "{{ $uniqueID }}"
spec:
  template:
    metadata:
      labels:
        creator: {{ default "honeydipper" $.ctx.job_creator }}
        honeydipper-unique-identifier: "{{ $uniqueID }}"
    spec:
      {{- with (initial .ctx.steps) }}
      initContainers:
        {{- range $index, $step := . }}
        {{-   if empty $step.as_sidecar }}
        {{-     template "container" (list $step $index $.ctx.script_types $.ctx.env $.ctx.volumes) }}
        {{-   end }}
        {{- end }}
      {{- end }}
      containers:
        {{- with (last .ctx.steps) }}
        {{-   template "container" (list . $finalStepNum $.ctx.script_types $.ctx.env $.ctx.volumes) }}
        {{- end }}
        {{- with (initial .ctx.steps) }}
        {{-   range $index, $step := . }}
        {{-     if not (empty $step.as_sidecar) }}
        {{-       template "container" (list $step $index $.ctx.script_types $.ctx.env $.ctx.volumes) }}
        {{-     end }}
        {{-   end }}
        {{- end }}
      restartPolicy: Never
      volumes:
        - name: workdir
        {{- with .ctx.workdir_volume }}
          {{- toYaml . | nindent 10 }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- range .ctx.volumes }}
        - {{ toJson .volume }}
        {{- end }}
        {{- range .ctx.steps }}
        {{-   range .volumes }}
        - {{ toJson .volume }}
        {{-   end }}
        {{- end }}
      {{- with .ctx.nodeSelector }}
      nodeSelector:
        {{ . | toJson }}
      {{- end }}
      {{- with .ctx.affinity }}
      affinity:
        {{ . | toJson }}
      {{- end }}
      {{- with .ctx.tolerations }}
      tolerations:
        {{ . | toJson }}
      {{- end }}
      {{- with .ctx.pod_securityContext }}
      securityContext: {{ . | toJson }}
      {{- end }}
  backoffLimit: {{ default 0 .ctx.k8s_job_backoffLimit }}
  parallelism: {{ default 1 .ctx.parallelism }}
  {{- with .ctx.timeout }}
  activeDeadlineSeconds: {{ . }}
  {{- end }}
  {{- with .ctx.cleanupAfter }}
  TTLSecondsAfterFinished: {{ . }}
  {{- end }}
