---
workflows:
  slashcommand:
    meta:
      description:
        - >
          This workflow is used internally to respond to slashcommand webhook events. You don't need to use this
          workflow directly in most cases. Instead, customize the workflow using :code:`_slashcommands` context.

      inputs:
        - name: slashcommands
          description: >
            A map of commands to their definitions.  Each definition should have a brief :code:`usage`, :code:`workflow`
            :code:`contexts`, and :code:`allowed_channels` fields. By default, two commands are already defined, :code:`help`, and
            :code:`reload`. You can extend the list or override the commands by defining this variable in :code:`_slashcommands` context.

        - name: slash_notify
          description: >
            A recipient list that will receive notifications and status of the commands executed through slashcommand.

      exports:
        - name: command
          description: >
            This variable will be passed the actual workflow invoked by the slashcommand.
            The command is the  first word after the prefix of the slashcommand. It is used for matching the definition in :code:`$ctx.slashcommands`.

        - name: parameters
          description: >
            This variable will be passed the actual workflow invoked by the slashcommand.
            The parameters is a string that contains the rest of the content in the slashcommand after the first word.

      notes:
        - >
          You can try to convert the :code:`$ctx.parameters` to the variables the workflow required by the workflow being invoked through
          the :code:`_slashcommands` context.

        - example: |
            ---
            contexts:
              _slashcommands:

            ######## definition of the commands ###########
                slashcommand:
                  slashcommands:
                    greeting:
                      usage: just greet the requestor
                      workflow: greet

            ######## setting the context variable for the invoked workflow ###########
                greet:
                  recipient: $ctx.user_name # exported by slashcommand event trigger
                  type: $ctx.parameters     # passed from slashcommand workflow

    no_export:
      - "*"

    steps:
      # iterate through the known commands after converting from map to a list
      - iterate_parallel: |-
          :yaml:---
          {{- range $k, $v := .ctx.slashcommands }}
          - {{ set $v "command" $k | toJson }}
          {{- end }}
        iterate_as: invoked

        steps:
          - if_match:
              command: $ctx.invoked.command
              # found a matching command

            steps:
              - export:
                  known_command: "true"
              - call_workflow: channel_translate
                with:
                  channel_names: $?ctx.invoked.allowed_channels
                export:
                  allowed_channel_ids: $?ctx.channel_ids
                no_export:
                  - channel_ids
              - if_match:
                  channel_id: $?ctx.allowed_channel_ids
                  user_name: $?ctx.invoked.allowed_users
                call_workflow: slashcommand/execute
                else:
                  steps:
                    - unless_match:
                        report_unauth_commands: "true"
                      export:
                        slash_notify: []
                        notify_on_error: []
                    - call_workflow: channel_translate
                      with:
                        channel_names: $?ctx.slash_notify
                    - call_workflow: slashcommand/respond
                      with:
                        message_type: error
                        reply_message: "The `{{ .ctx.command }}` command is only accepted from <#{{ .ctx.allowed_channel_ids | join `>, <#` }}> ."
                        notification: |-
                          unauthorized command: *{{ .ctx.text }}*
                          by: {{ .ctx.user_name }}
                          channel: {{ .ctx.channel_name }}
            no_export:
              - allowed_channel_ids

      # no matching command found
      - unless_match:
          known_command: "true"
        steps:
          - unless_match:
              report_unknown_commands: "true"
            export:
              slash_notify: []
              notify_on_error: []
          - call_workflow: channel_translate
            with:
              channel_names: $?ctx.slash_notify
          - call_workflow: slashcommand/respond
            with:
              message_type: error
              reply_message: Unknown command `{{ .ctx.command }}`
              notification: |-
                unknown command: *{{ .ctx.text }}*
                by: {{ .ctx.user_name }}
                channel: {{ .ctx.channel_name }}

  slashcommand/execute:
    contexts: $?ctx.invoked.contexts
    if_match:
      invoked:
        command: help
    call_workflow: $ctx.invoked.workflow
    else:
      steps:
        - call_workflow: slashcommand/prepare_notification_list
        - call_workflow: $ctx.invoked.workflow
          with:
            slashcommands: '*removed*'
            hooks:
              on_first_action:
                - slashcommand/announcement
              on_exit:
                - workflow_status
          # override the message to show actual workflow name in slack status messages
          description: $ctx.invoked.workflow

  slashcommand/help:
    meta:
      description:
        - >
          This workflow sends a list of supported commands to the requestor.  Used internally.

    if_match:
      slashcommands:
        ":absent:": $ctx.parameters
    call_workflow: notify
    with:
      notify:
        - reply
      blocks:
        - type: section
          text:
            text: |-
              *All supported commands*
              {{- range .ctx.slashcommands }}
              `{{ .command }}` - {{ .usage }}
              {{- end }}
            type: mrkdwn
    else:
      call_workflow: notify
      with:
        notify:
          - reply
        blocks:
          - type: section
            text:
              text: |-
                *Command: {{ .ctx.parameters }}*
                {{- with ( index .ctx.slashcommands .ctx.parameters "usage_detail" ) }}

                {{ . }}
                {{ else }}

                No detailed information available for this command.
                {{- end }}
              type: mrkdwn

  slashcommand/respond:
    meta:
      description:
        - >
          This workflow sends a response message to the channels listed in :code:`slash_notify`.  Used internally.

    threads:
      - unless_match:
          - channel_ids: $ctx.channel_id
          - slash_notify: $ctx.channel_fullname
        call_workflow: notify
        with:
          notify:
            - reply
          notify_on_error: []
          message_type: $ctx.message_type,"normal"
          message: $?ctx.reply_message
      - call_workflow: notify
        with:
          notify: $?ctx.slash_notify
          message_type: $ctx.message_type,"normal"
          message: $?ctx.notification

  slashcommand/announcement:
    meta:
      description:
        - >
          This workflow sends an announcement message to the channels listed in :code:`slash_notify`.  Used internally.

    call_workflow: slashcommand/respond
    with:
      reply_message: |-
        command: *{{ .ctx.text }}*
      notification: |-
        command: *{{ .ctx.text }}*
        by: {{ .ctx.user_name }}
        channel: {{ .ctx.channel_name }}

  slashcommand/prepare_notification_list:
    meta:
      description:
        - >
          This workflow constructs the notification list using :code:`slash_notify`. If the command is NOT issued from one of
          the listed channels, a :code:`reply` is added to the list to ensure that the command invoker gets proper feedback.

    steps:
      - call_workflow: channel_translate
        with:
          channel_names: $?ctx.slash_notify
        export:
          notify: $?ctx.slash_notify
      - unless_match:
          - channel_ids: $ctx.channel_id
          - slash_notify: $ctx.channel_fullname
        export:
          notify+:
            - reply

  slack_users:
    steps:
      - call_function: slack_bot.users
      - while:
          - $?ctx.slack_next_cursor
        steps:
          - call_function: slack_bot.users

    meta:
      description:
        - This workflow wraps around the :code:`slack_bot.users` function and make multiple calls to stitch pages together.
