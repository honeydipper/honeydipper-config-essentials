---
workflows:
  slashcommand:
    meta:
      description:
        - >
          This workflow is used internally to respond to slashcommand webhook events. You don't need to use this
          workflow directly in most cases. Instead, customize the workflow using :code:`_slashcommands` context.

      inputs:
        - name: slashcommands
          description: >
            A map of commands to their definitions.  Each definition should have a brief :code:`usage`, :code:`workflow`
            :code:`contexts`, and :code:`allowed_channels` fields. By default, two commands are already defined, :code:`help`, and
            :code:`reload`. You can extend the list or override the commands by defining this variable in :code:`_slashcommands` context.

        - name: slash_notify
          description: >
            A recipient list that will receive notifications and status of the commands executed through slashcommand.

      exports:
        - name: command
          description: >
            This variable will be passed the actual workflow invoked by the slashcommand.
            The command is the  first word after the prefix of the slashcommand. It is used for matching the definition in :code:`$ctx.slashcommands`.

        - name: parameters
          description: >
            This variable will be passed the actual workflow invoked by the slashcommand.
            The parameters is a string that contains the rest of the content in the slashcommand after the first word.

      notes:
        - >
          You can try to convert the :code:`$ctx.parameters` to the variables the workflow required by the workflow being invoked through
          the :code:`_slashcommands` context.

        - example: |
            ---
            contexts:
              _slashcommands:

            ######## definition of the commands ###########
                slashcommand:
                  slashcommands:
                    greeting:
                      usage: just greet the requestor
                      workflow: greet

            ######## setting the context variable for the invoked workflow ###########
                greet:
                  recipient: $ctx.user_name # exported by slashcommand event trigger
                  type: $ctx.parameters     # passed from slashcommand workflow
    with:
      notify:
        - reply
      notify_on_error: $?ctx.slash_notify

    no_export:
      - "*"

    steps:
      # sets up notification list skip reply to avoid duplicated message if needed
      - call_workflow: channel_translate
        with:
          channel_names: $?ctx.slash_notify
        export:
          status_notify: ':yaml:{{ has .ctx.channel_id .ctx.channel_ids | or (has .ctx.channel_fullname .ctx.slash_notify) | ternary `[]` `["reply"]` }}'
        no_export:
          - channel_ids

      - call_workflow: slashcommand/announcement
        no_export:
          - "*"

      # iterate through the known commands after converting from map to a list
      - iterate_parallel: |-
          :yaml:---
          {{- range $k, $v := .ctx.slashcommands }}
          - {{ set $v "command" $k | toJson }}
          {{- end }}
        iterate_as: invoked

        steps:
          - if_match:
              command: $ctx.invoked.command
              # found a matching command

            steps:
              - export:
                  known_command: "true"
              - call_workflow: channel_translate
                with:
                  channel_names: $?ctx.invoked.allowed_channels
              - if_match:
                  channel_id: $?ctx.channel_ids
                  user_name: $?ctx.invoked.allowed_users
                call_workflow: slashcommand/execute
                else:
                  call_workflow: notify
                  with:
                    notify: $?ctx.status_notify
                    message_type: error
                    message: The `{{ .ctx.command }}` command is only accepted from allowed channels and/or users.
            no_export:
              - channel_ids

      # no matching command found
      - unless_match:
          known_command: "true"
        call_workflow: notify
        with:
          notify: $?ctx.status_notify
          message_type: error
          message: Unknown command `{{ .ctx.command }}`

  slashcommand/execute:
    call_workflow: $ctx.invoked.workflow
    contexts: $?ctx.invoked.contexts
    with:
      slashcommands: ':yaml:{{ empty .ctx.invoked.keep_commands | ternary "*removed*" .ctx.slashcommands | toJson }}'
    # override the message to show actual workflow name in slack status messages
    description: $ctx.invoked.workflow

  slashcommand/help:
    meta:
      description:
        - >
          This workflow sends a list of supported commands to the requestor.  Used internally.

    call_workflow: notify
    with:
      blocks:
        - type: section
          text:
            text: |-
              *All supported commands*
              {{- range .ctx.slashcommands }}
              `{{ .command }}` - {{ .usage }}
              {{- end }}
            type: mrkdwn

  slashcommand/announcement:
    meta:
      description:
        - >
          This workflow sends a announcement message to the channels listed in :code:`slash_notify`.  Used internally.

    unless_match:
      command: help
    threads:
      - call_workflow: notify
        with:
          notify*: $?ctx.status_notify
          message: |-
            command: *{{ .ctx.text }}*
      - call_workflow: notify
        with:
          notify: $?ctx.slash_notify
          message: |-
            command: *{{ .ctx.text }}*
            by: {{ .ctx.user_name }}
            channel: {{ .ctx.channel_name }}

  slashcommand/status:
    meta:
      description:
        - >
          This workflow sends a status message to the channels listed in :code:`slash_notify`.  Used internally.

    unless_match:
      command: help
    call_workflow: workflow_status
    with:
      notify: $?ctx.status_notify
      notify+: $?ctx.slash_notify

  slack_users:
    steps:
      - call_function: slack_bot.users
      - while:
          - $?ctx.slack_next_cursor
        steps:
          - call_function: slack_bot.users

    meta:
      description:
        - This workflow wraps around the :code:`slack_bot.users` function and make multiple calls to stitch pages together.
